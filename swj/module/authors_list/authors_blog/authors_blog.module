<?php
// $Id$
/**
**/
function authors_blog_menu() {
  $items['blog/authors'] = array(
		'title' => '',
		'description' => 'List  of Bloggers in Alphabetical Order',
		'page callback' => 'authors_blog_alpha',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	$items['blog/authors/post'] = array(
		'title' => '',
		'description' => 'List  of Bloggers by Number of Posts',
		'page callback' => 'authors_blog_posts',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	$items['blog/authors/recent'] = array(
		'title' => '',
		'description' => 'List  of Bloggers by Recent Posts',
		'page callback' => 'authors_blog_recent',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
  return $items;
}
function authors_blog_alpha() {
  $query = "SELECT DISTINCT author.field_op_author_nid as authID, auth_node.title as authName FROM {node} node 
  INNER JOIN {content_field_op_author} author ON node.nid = author.nid 
  INNER JOIN {node} auth_node ON author.field_op_author_nid=auth_node.nid 
  WHERE node.type like 'blog' AND node.status=1 ORDER BY auth_node.title ASC";
  
  $count = "SELECT COUNT(DISTINCT ( author.field_op_author_nid)) FROM {node} node INNER JOIN {content_field_op_author} author ON node.nid = author.nid INNER JOIN {node} auth_node ON author.field_op_author_nid=auth_node.nid WHERE node.type like 'blog' AND node.status=1";

  $result = pager_query($query, 15, 0, $count);

  $data = array();
  $data[0]['pager'] = theme('pager', 15);
  $data[0]['title'] = 'Authors List';
  $data[0]['links'] = l(t("Recent post"), "blog/authors/recent");
  $data[0]['links'] .= " | ".l(t("Most posts"), "blog/authors/post");
  $incr = 1;
  while ($obj = db_fetch_object($result)) {
    $node = node_load($obj->authID);
	$url = $node->field_author_link[0][url];
	if($url) {
	$attrib = array('external'=>true, 'attributes' => array('target'=>'_blank'));
	$data[$incr]['link'] = l(t("More .."), $url, $attrib);
	}
	$data[$incr]['name'] = l(t($obj->authName),"node/".$obj->authID);
	
	$data_query = "SELECT COALESCE(auth.field_short_bio_value,'') as short_bio, COALESCE(auth.field_author_photo_data,'') as photo_data, images.filepath as photo_image FROM {content_type_author} auth LEFT JOIN {files} images ON auth.field_author_photo_fid =images.fid WHERE auth.nid=".$obj->authID;
	$data_result = db_query($data_query);
	$data_object = db_fetch_object($data_result);
	
	$data[$incr]['short_bio'] =$data_object->short_bio;
	$data[$incr]['image_detail'] = (empty($data_object->photo_data) ? NULL : unserialize($data_object->photo_data));
	
	$default = (content_fields('field_author_photo', $node->type));
	$default_image = $default['widget']['default_image']['filepath'];
	$image_path = $node->field_author_photo[0]['filepath'] ? $node->field_author_photo[0]['filepath'] : $default_image;
	$image = theme('imagecache', 'author_photo', $image_path);
	$data[$incr]['image'] = l($image, "node/".$node->nid,array('html'=> TRUE, 'attributes'=>array('class'=>'author-img')));
	
	$incr++;
  }
  
  $data['authors'] = authors_blog_list("auth_node.title ASC");

  return theme("authors_blog",$data);
}

function authors_blog_posts() {
 $query = "SELECT author.field_op_author_nid as id, auth_node.title as name, count(author.field_op_author_nid)as posts FROM {node} node 
			INNER JOIN {content_field_op_author author} ON node.nid=author.nid  
			INNER JOIN {node} auth_node ON author.field_op_author_nid=auth_node.nid 
			WHERE node.type='blog' AND node.status=1 
		GROUP BY author.field_op_author_nid ORDER BY posts DESC";
		
 $count = "SELECT COUNT(DISTINCT ( author.field_op_author_nid)) FROM {node} node 
			INNER JOIN {content_field_op_author} author ON node.nid = author.nid 
			INNER JOIN {node} auth_node ON author.field_op_author_nid=auth_node.nid 
		WHERE node.type like 'blog' AND node.status=1";
 $result = pager_query($query, 15, 0, $count);
  $data = array();
  $data[0]['pager'] = theme('pager', 15);
  $data[0]['title'] = 'Authors List';
  $data[0]['links'] = l(t("Recent post"), "blog/authors/recent");
  $data[0]['links'] .= " | ".l(t("Alphabetical"), "blogs/author");
  $incr = 1;
  while ($obj = db_fetch_object($result)) {
	$node = node_load($obj->id);
	$url = $node->field_author_link[0][url];
	if($url) {
	  $attrib = array('external'=>true, 'attributes' => array('target'=>'_blank'));
	  $data[$incr]['link'] = l(t("More .."), $url, $attrib);
	}
	$data[$incr]['name'] = l(t($obj->name),"node/".$obj->id)." (".$obj->posts.")";
	
	$data_query = "SELECT COALESCE(auth.field_short_bio_value,'') as short_bio, COALESCE(auth.field_author_photo_data,'') as photo_data, images.filepath as photo_image FROM {content_type_author} auth LEFT JOIN {files} images ON auth.field_author_photo_fid =images.fid WHERE auth.nid=".$obj->id;
	$data_result = db_query($data_query);
	$data_object = db_fetch_object($data_result);
	$tags = array("<p>", "</p>");
	$data[$incr]['short_bio'] = str_replace($tags, "", $data_object->short_bio);
	$data[$incr]['image_detail'] = (empty($data_object->photo_data) ? NULL : unserialize($data_object->photo_data));
	
	$default = (content_fields('field_author_photo', $node->type));
	$default_image = $default['widget']['default_image']['filepath'];
	$image_path = $node->field_author_photo[0]['filepath'] ? $node->field_author_photo[0]['filepath'] : $default_image;
	$image = theme('imagecache', 'author_photo', $image_path);
	$data[$incr]['image'] = l($image, "node/".$node->nid,array('html'=> TRUE, 'attributes'=>array('class'=>'author-img')));
	
	$incr++;
  }
  $data['authors'] = authors_blog_list("posts DESC");
  return theme("authors_blog",$data);

}


function authors_blog_recent() {
 $query = "SELECT author.field_op_author_nid as id, auth_node.title as name  FROM {node} node
		INNER JOIN {content_field_op_author} author ON author.nid = node.nid
		INNER JOIN {node} auth_node ON author.field_op_author_nid = auth_node.nid
		WHERE node.type = 'blog' AND node.status=1 
		GROUP BY author.field_op_author_nid ORDER by node.created DESC";
 $count = "SELECT COUNT(DISTINCT ( author.field_op_author_nid)) FROM {node} node
		INNER JOIN {content_field_op_author} author ON node.nid = author.nid 
		INNER JOIN {node} auth_node ON author.field_op_author_nid=auth_node.nid 
		WHERE node.type like 'blog' AND node.status=1";
 $result = pager_query($query, 15, 0, $count);
 
  $data = array();
  $data[0]['pager'] = theme('pager', 15);
  $data[0]['title'] = 'Authors List';
  $data[0]['links'] = l(t("Alphabetical"), "blogs/author");
  $data[0]['links'] .= " | ".l(t("Most posts"), "blog/authors/post");
  $incr = 1;
  while ($obj = db_fetch_object($result)) {
	$node = node_load($obj->id);
	$url = $node->field_author_link[0][url];
	if($url) {
	  $attrib = array('external'=>true, 'attributes' => array('target'=>'_blank'));
	  $data[$incr]['link'] = l(t("More .."), $url, $attrib);
	}
	$data[$incr]['name'] = l(t($obj->name),"node/".$obj->id);
	
	$data_query = "SELECT COALESCE(auth.field_short_bio_value,'') as short_bio, COALESCE(auth.field_author_photo_data,'') as photo_data, images.filepath as photo_image FROM {content_type_author} auth LEFT JOIN {files} images ON auth.field_author_photo_fid =images.fid WHERE auth.nid=".$obj->id;
	$data_result = db_query($data_query);
	$data_object = db_fetch_object($data_result);
	
	$data[$incr]['short_bio'] = str_replace($tags, "", $data_object->short_bio);
	$data[$incr]['image_detail'] = (empty($data_object->photo_data) ? NULL : unserialize($data_object->photo_data));
	$tags = array("<p>", "</p>");
	$default = (content_fields('field_author_photo', $node->type));
	$default_image = $default['widget']['default_image']['filepath'];
	$image_path = $node->field_author_photo[0]['filepath'] ? $node->field_author_photo[0]['filepath'] : $default_image;
	$image = theme('imagecache', 'author_photo', $image_path);
	$data[$incr]['image'] = l($image, "node/".$node->nid,array('html'=> TRUE, 'attributes'=>array('class'=>'author-img')));
	
	$incr++;
  }
 $data['authors'] = authors_blog_list("node.created DESC"); 
 return theme("authors_blog",$data);		
}


/**
	To get list of all authors (content type) who have written a blog post.
	Just lists name only, in the same sort order as selected.
*/
function authors_blog_list($orderby = '') {
	$authors = array();

	 $query = "SELECT author.field_op_author_nid as id, auth_node.title as name, count(author.field_op_author_nid)as posts FROM {node} node
		INNER JOIN {content_field_op_author} author ON author.nid = node.nid
		INNER JOIN {node} auth_node ON author.field_op_author_nid = auth_node.nid
		WHERE node.type = 'blog' AND node.status=1 
		GROUP BY author.field_op_author_nid";
		if ($orderby!='')
			$query .= " ORDER by ".$orderby;

		$q = db_query($query);
		while ($r = db_fetch_array($q)) {
		  $authors[] = $r;
		}

	return $authors;

}


function authors_blog_theme() {
  return array(
    'authors_blog' => array(
	  'template' => 'authors_blog',
	  'arguments' => array('data'=> NULL),
	),
	'home_page_block' => array(
	  'template' => 'home-page-block',
	  'arguments' => array('data' => NULL, 'title'=>NULL),
	),
	'right_side_block' => array(
	  'template' => 'right-side-block',
	  'arguments' => array('data' => NULL, 'title' => NULL),
	),
  );
}

/**
* Implementation of hook_block().
*/
function authors_blog_block($op = 'list', $delta = 0) {
  $block = array();
  switch ($op) {
    case 'list':
	  $block[0]['info'] = t('Homepage Recent Comments');
      $block[1]['info']	= t('Right Side Recent Comments');
    break;
    case 'view':
      switch ($delta) {
	    case 0:
		  $block['content'] = blog_home_recent_comments();
		break;
		case 1:
		  $block['content'] = blog_side_recent_comments();
		break;
	  }
  }
  return $block;
}

function get_comments_data($limit = NULL, $article = FALSE) {
  $query = "select c1.cid, c1.nid as nid, c1.name as commenter, n.title as node_comments_title,
			n.nid as node_comments_nid, n.language as node_comments_language,     c1.timestamp as comments_timestamp from comments c1
			JOIN (select nid, max(timestamp) as timestamp from comments group by nid) as c2 on   c1.nid = c2.nid AND  c1.timestamp = c2.timestamp    
			LEFT JOIN node n on c1.nid = n.nid  LEFT JOIN abuse_status a on c1.cid = a.oid    
			WHERE  (n.status <> 0) AND (c1.status = 0) AND (n.type in ('blog'";
	if ($article) {
	$query .= ", 'article'";
	}
 $query .= ")) AND (a.status IS NULL OR a.status < 3) order by c1.timestamp DESC";
 
  if($limit) {
    $query .= " LIMIT ".$limit;
  }
  $result = db_query($query);
  return $result;
}

function blog_home_recent_comments() {
  $limit = 5;
  $title = t('recent comments');
  $result = get_comments_data($limit, TRUE);
  $data = array();
  $i = 0;
  while($obj = db_fetch_object($result)) {
        $node_link = 'node/'.$obj->nid;
         if (empty($obj->commenter)) {
	  $obj->commenter = t("Anonymous");
	}
	$attributes = array('target'=> '_blank');
	$comment_extras = array('fragment'=>'comment-'.$obj->cid, 'external'=> FALSE,'attributes'=>$attributes);
	$data[$i] = l(t($obj->commenter), $node_link, $comment_extras).t(' on ').l(t($obj->node_comments_title), $node_link);
	$i++;
  }
 return theme('home_page_block', $data, $title);
}

function blog_side_recent_comments() {
  $limit = 5;
  $title = t('Recent SWJ Blog Comments');
  $result = get_comments_data($limit); 
  $data = array();
  //$i = 0;
  while($obj = db_fetch_object($result)) {
        if (empty($obj->commenter)) {
	  $obj->commenter = t("Anonymous");
	}
        $node_link = 'node/'.$obj->nid;
	$attributes = array('target'=> '_blank');
	$comment_extras = array('fragment'=>'comment-'.$obj->cid, 'external'=> FALSE,'attributes'=>$attributes);
	$data[] = l(t($obj->commenter), $node_link, $comment_extras).t(' on ').l(t($obj->node_comments_title), $node_link);
  }
  return theme('right_side_block', $data, $title);
}

function _getFirstWords($string, $words = 1)
{
    $string = explode(' ', $string);

    if (count($string) > $words)
    {
        return implode(' ', array_slice($string, 0, $words)) . '...';
    }

    return implode(' ', $string);
}


/*
function _test($arr) {
  print "<pre>";
  print_r($arr);
  print "</pre>";
}*/

