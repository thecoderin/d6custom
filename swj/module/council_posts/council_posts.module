<?php


/**
* Implementation of hook_block().
*/
function council_posts_block($op = 'list', $delta = 0) {
  $block = array();
  switch ($op) {
    case 'list':
	  $block[0]['info'] = t('SWJ Council Posts');
    break;
    case 'view':
      switch ($delta) {
	    case 0:
		  $block['content'] = council_posts_getData();
		break;
	  }
  }
  return $block;
}


function council_posts_getData() {
  $url = "http://council.smallwarsjournal.com/external.php?lastpost=true";
  $xml = @file_get_contents($url);
  $xmlvar = new XmlToArray($xml);
  $feed = $xmlvar->createArray();
  $i = 0;
  if (count($feed['rss']['channel'][0]['item']) > 0 ) {
  $items = $feed['rss']['channel'][0]['item'];
  $title = t('recent council posts');
  $data = array();
    foreach ( $items as $item) {
    if($i == 5) break;
	 if (!empty($item['title'])) {
		$data[$i] = l(t($item['title']), $item['link'])." by <i>".$item['dc:creator']."</i>";
		$i++;
		}
		else break;
	    
   }
   return theme('council_posts', $data, $title);
  } 
}

function council_posts_theme(){
  $theme = array(
    'council_posts' => array(
	  'template' => 'council-posts-block',
	  'arguments' => array('data'=> NULL, 'title'=>NULL),
	),
  );
  return $theme;
}
/***
function _test($arr) {
print "<pre>";
print_r($arr);
print "</pre>";
}
***/
/*XML to PHP array conversion */
class XmlToArray
{
    var $xml='';
   
    /**
    * Default Constructor
    * @param $xml = xml data
    * @return none
    */
    function XmlToArray($xml)
    {
       $this->xml = $xml;   
    }
   
    /**
    * _struct_to_array($values, &$i)
    *
    * This is adds the contents of the return xml into the array for easier processing.
    * Recursive, Static
    *
    * @access    private
    * @param    array  $values this is the xml data in an array
    * @param    int    $i  this is the current location in the array
    * @return    Array
    */
    function _struct_to_array($values, &$i)
    {
        $child = array();
        if (isset($values[$i]['value'])) array_push($child, $values[$i]['value']);
        while ($i++ < count($values)) {
            switch ($values[$i]['type']) {
                case 'cdata':
                array_push($child, $values[$i]['value']);
                break;
                case 'complete':
                    $name = $values[$i]['tag'];
                    if(!empty($name)){
                    $child[$name]= ($values[$i]['value'])?($values[$i]['value']):'';
                    if(isset($values[$i]['attributes'])) {                   
                        $child[$name] = $values[$i]['attributes'];
                    }
                }
                break;
                case 'open':
                    $name = $values[$i]['tag'];
                    $size = isset($child[$name]) ? sizeof($child[$name]) : 0;
                    $child[$name][$size] = $this->_struct_to_array($values, $i);
                break;
                case 'close':
                    return $child;
                break;
            }
        }
        return $child;
    }//_struct_to_array
   
    /**
    * createArray($data)
    *
    * This is adds the contents of the return xml into the array for easier processing.
    *
    * @access    public
    * @param    string    $data this is the string of the xml data
    * @return    Array
    */
    function createArray()
    {
        $xml    = $this->xml;
		//print $xml;
        $values = array();
        $index  = array();
        $array  = array();
        $parser = xml_parser_create();
        xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);
        xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);
        xml_parse_into_struct($parser, $xml, $values, $index);
        xml_parser_free($parser);
        $i = 0;
        $name = $values[$i]['tag'];
        $array[$name] = isset($values[$i]['attributes']) ? $values[$i]['attributes'] : '';
        $array[$name] = $this->_struct_to_array($values, $i);
        return $array;
    }//createArray
}//XmlToArray